{"version":3,"sources":["../node_modules/contentful-ui-extensions-sdk/dist sync","components/QuestionTypeSwitcher/QuestionTypeSwitcher.tsx","components/AddChoice/AddChoice.tsx","components/QuestionChoice/QuestionChoice.tsx","components/SingleMultipleChoice/SingleMultipleChoice.tsx","components/CustomDropDown/CustomDropDown.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","questionTypes","QuestionTypeSwitcher","isOpen","setOpen","selectedQuestionType","setQuestionType","className","onClose","key","Date","now","toggleElement","size","buttonType","indicateDropdown","onClick","map","questionType","isActive","AddChoice","props","React","text","setText","value","placeholder","role","onChange","event","currentTarget","onKeyPress","onSubmit","QuestionChoice","choice","removeChoice","makeValid","dndProvided","draggableProps","dragHandleProps","ref","innerRef","QuestionChoiceContent","style","display","margin","labelText","inputProps","checked","isValid","dropdown","data-testid","iconProps","icon","label","SingleMultipleChoice","question","choices","index","draggableId","provided","snapshot","type","CustomDropDown","position","App","sdk","useState","setQuestion","useEffect","window","updateHeight","questionContentful","field","getValue","setValue","choiceId","filter","Math","random","toString","slice","onDragEnd","result","destination","sourceIndex","source","destinationIndex","itemsBefore","itemsAfter","itemToMove","itemsEnd","droppableId","droppableProps","Boolean","location","hostname","match","init","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.aa9515f8.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 29;","import * as React from \"react\";\nimport {\n  Dropdown,\n  Button,\n  DropdownListItem,\n  DropdownList,\n} from \"@contentful/forma-36-react-components\";\nimport { QuestionType } from \"../../App\";\n\nconst questionTypes: QuestionType[] = [\n  \"single-choice\",\n  \"multiple-choice\",\n  \"dropdown\",\n];\n\ntype Props = {\n  isOpen: boolean;\n  setOpen: (isOpen: boolean) => void;\n  selectedQuestionType: QuestionType;\n  setQuestionType: (questionType: QuestionType) => void;\n};\n\nexport function QuestionTypeSwitcher({\n  isOpen,\n  setOpen,\n  selectedQuestionType,\n  setQuestionType,\n}: Props) {\n  return (\n    <div className=\"question-type\">\n      <span>Choose question type:</span>\n      <Dropdown\n        isOpen={isOpen}\n        onClose={() => {\n          setOpen(false);\n        }}\n        key={Date.now()} // Force Reinit\n        toggleElement={\n          <Button\n            size=\"small\"\n            buttonType=\"muted\"\n            indicateDropdown\n            onClick={() => setOpen(!isOpen)}\n          >\n            {selectedQuestionType}\n          </Button>\n        }\n      >\n        <DropdownList>\n          {questionTypes.map((questionType) => (\n            <DropdownListItem\n              key={questionType}\n              isActive={questionType === selectedQuestionType}\n              onClick={() => {\n                setQuestionType(questionType);\n                setOpen(false);\n              }}\n            >\n              {questionType}\n            </DropdownListItem>\n          ))}\n        </DropdownList>\n      </Dropdown>\n    </div>\n  );\n}\n","import * as React from \"react\";\nimport { TextInput } from \"@contentful/forma-36-react-components\";\n\ninterface Props {\n  onSubmit: (text: string) => void;\n}\n\nexport function AddChoice(props: Props) {\n  const [text, setText] = React.useState(\"\");\n\n  return (\n    <div className=\"add-choice-container\">\n      <TextInput\n        value={text}\n        placeholder=\"add the choice's text and press return\"\n        role=\"add-choice-input\"\n        onChange={(event) => {\n          setText(event.currentTarget.value);\n        }}\n        onKeyPress={(event) => {\n          if (event.key === \"Enter\") {\n            props.onSubmit(text);\n            setText(\"\");\n          }\n        }}\n      />\n    </div>\n  );\n}\n","import * as React from \"react\";\nimport {\n  CardDragHandle,\n  Card,\n  IconButton,\n  RadioButtonField,\n  CheckboxField,\n} from \"@contentful/forma-36-react-components\";\n\nimport { Choice, QuestionType } from \"../../App\";\nimport { DraggableProvided } from \"react-beautiful-dnd\";\n\ntype ContentProps = {\n  choice: Choice;\n  removeChoice: (choiceId: string) => void;\n  makeValid: (choiceId: string) => void;\n  questionType: QuestionType;\n};\n\ntype Props = ContentProps & {\n  dndProvided: DraggableProvided;\n};\n\nexport function QuestionChoice({\n  choice,\n  removeChoice,\n  makeValid,\n  dndProvided,\n  questionType,\n}: Props) {\n  return (\n    <div\n      {...dndProvided.draggableProps}\n      {...dndProvided.dragHandleProps}\n      ref={dndProvided.innerRef}\n    >\n      <QuestionChoiceContent\n        choice={choice}\n        removeChoice={removeChoice}\n        makeValid={makeValid}\n        questionType={questionType}\n      />\n    </div>\n  );\n}\n\nexport function QuestionChoiceContent({\n  choice,\n  removeChoice,\n  makeValid,\n  questionType,\n}: ContentProps) {\n  return (\n    <Card style={{ display: \"flex\" }}>\n      <div style={{ margin: \"-0.875rem 1rem -0.875rem -0.875rem\" }}>\n        <CardDragHandle>move</CardDragHandle>\n      </div>\n      {\n        {\n          \"single-choice\": (\n            <RadioButtonField\n              labelText={choice.text}\n              inputProps={{\n                \"data-testid\": `make-choice-valid-${choice.id}`,\n              }}\n              checked={choice.isValid}\n              onChange={() => {\n                makeValid(choice.id);\n              }}\n              id=\"choice-id\"\n            />\n          ),\n          \"multiple-choice\": (\n            <CheckboxField\n              labelText={choice.text}\n              inputProps={{\n                \"data-testid\": `make-choice-valid-${choice.id}`,\n              }}\n              checked={choice.isValid}\n              id=\"choice-id\"\n              onChange={() => {\n                makeValid(choice.id);\n              }}\n            />\n          ),\n          dropdown: null,\n        }[questionType]\n      }\n      <IconButton\n        onClick={() => removeChoice(choice.id)}\n        buttonType=\"negative\"\n        data-testid={`remove-choice-${choice.id}`}\n        iconProps={{\n          icon: \"Close\",\n        }}\n        label=\"remove\"\n      />\n    </Card>\n  );\n}\n","import React from \"react\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport { QuestionChoice } from \"../QuestionChoice\";\nimport { Question } from \"../../App\";\n\ninterface Props {\n  question: Question;\n  removeChoice: (choiceId: string) => void;\n  makeValid: (choiceId: string) => void;\n}\n\nexport function SingleMultipleChoice(props: Props) {\n  const { question, removeChoice, makeValid } = props;\n  return (\n    <>\n      {question.choices.map((choice, index) => (\n        <Draggable key={choice.id} draggableId={choice.id} index={index}>\n          {(provided, snapshot) => (\n            <QuestionChoice\n              questionType={question.type}\n              dndProvided={provided}\n              choice={choice}\n              removeChoice={removeChoice}\n              makeValid={makeValid}\n            />\n          )}\n        </Draggable>\n      ))}\n    </>\n  );\n}\n","import React from \"react\";\nimport {\n  Dropdown,\n  Button,\n  DropdownListItem,\n  DropdownList,\n  IconButton,\n  RadioButtonField,\n} from \"@contentful/forma-36-react-components\";\nimport { Choice } from \"../../App\";\n\ninterface Props {\n  choices: Choice[];\n  makeValid: (choiceId: string) => void;\n  removeChoice: (choiceId: string) => void;\n}\n\nexport function CustomDropDown(props: Props) {\n  const { choices, makeValid, removeChoice } = props;\n  return (\n    <Dropdown\n      isOpen={true}\n      key={Date.now()} // Force Reinit\n      position=\"bottom-left\"\n      toggleElement={\n        <Button size=\"small\" buttonType=\"muted\" indicateDropdown>\n          Trigger Dropdown\n        </Button>\n      }\n    >\n      <DropdownList>\n        {choices &&\n          choices.map(({ id, text, isValid }) => (\n            <DropdownListItem key={id}>\n              <RadioButtonField\n                labelText={text}\n                checked={isValid}\n                inputProps={{\n                  \"data-testid\": `make-choice-${id}-valid`,\n                }}\n                onChange={() => {\n                  makeValid(id);\n                }}\n                id=\"choice-id\"\n              />\n              <IconButton\n                onClick={() => removeChoice(id)}\n                buttonType=\"negative\"\n                data-testid={`remove-choice-${id}`}\n                iconProps={{\n                  icon: \"Close\",\n                }}\n                label=\"remove\"\n              />\n            </DropdownListItem>\n          ))}\n      </DropdownList>\n    </Dropdown>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport \"@contentful/forma-36-react-components/dist/styles.css\";\n\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport { QuestionTypeSwitcher } from \"./components/QuestionTypeSwitcher\";\nimport { AddChoice } from \"./components/AddChoice\";\nimport { SingleMultipleChoice } from \"./components/SingleMultipleChoice\";\nimport { CustomDropDown } from \"./components/CustomDropDown\";\nimport { FieldExtensionSDK } from \"contentful-ui-extensions-sdk\";\n\nexport type Choice = {\n  text: string;\n  id: string;\n  isValid: boolean;\n};\n\nexport type QuestionType = \"single-choice\" | \"multiple-choice\" | \"dropdown\";\n\nexport type Question = {\n  type: QuestionType;\n  choices: Choice[];\n};\n\ninterface Props {\n  sdk: FieldExtensionSDK;\n}\n\nfunction App({ sdk }: Props) {\n  const [isOpen, setOpen] = React.useState(false);\n  const [question, setQuestion] = React.useState<Question>({\n    type: \"multiple-choice\",\n    choices: [],\n  });\n\n  React.useEffect(() => {\n    sdk.window.updateHeight(550);\n    const questionContentful = sdk.field.getValue();\n    setQuestion(questionContentful);\n  }, [sdk]);\n\n  React.useEffect(() => {\n    sdk.field.setValue(question);\n  }, [sdk, question]);\n\n  const makeValid = (choiceId: string) => {\n    setQuestion({\n      ...question,\n      choices: question.choices.map((choice) => {\n        if (choice.id === choiceId) {\n          return { ...choice, isValid: !choice.isValid };\n        }\n        if (question.type === \"single-choice\" || question.type === \"dropdown\")\n          return { ...choice, isValid: false };\n        return choice;\n      }),\n    });\n  };\n\n  const removeChoice = (choiceId: string) => {\n    setQuestion({\n      ...question,\n      choices: question.choices.filter((choice) => choice.id !== choiceId),\n    });\n  };\n\n  return (\n    <div className=\"question-container\">\n      <QuestionTypeSwitcher\n        selectedQuestionType={question.type}\n        isOpen={isOpen}\n        setOpen={setOpen}\n        setQuestionType={(questionType) => {\n          setQuestion({\n            ...question,\n            type: questionType,\n            choices: question.choices.map((choice) => ({\n              ...choice,\n              isValid: false,\n            })),\n          });\n        }}\n      />\n      <AddChoice\n        onSubmit={(text) => {\n          setQuestion({\n            ...question,\n            choices: [\n              ...question.choices,\n              {\n                isValid: false,\n                id: `${Math.random().toString().slice(2)}`,\n                text,\n              },\n            ],\n          });\n        }}\n      />\n      <DragDropContext\n        onDragEnd={(result) => {\n          if (result.destination) {\n            const sourceIndex = result.source.index;\n            const destinationIndex = result.destination.index;\n            const choices = [...question.choices];\n            if (destinationIndex > sourceIndex) {\n              const itemsBefore = choices.slice(0, sourceIndex);\n              const itemsAfter = choices.slice(\n                sourceIndex + 1,\n                destinationIndex + 1\n              );\n              const itemToMove = choices[sourceIndex];\n              const itemsEnd = choices.slice(destinationIndex + 1);\n              setQuestion({\n                ...question,\n                choices: [\n                  ...itemsBefore,\n                  ...itemsAfter,\n                  itemToMove,\n                  ...itemsEnd,\n                ],\n              });\n            } else if (sourceIndex > destinationIndex) {\n              const itemsBefore = choices.slice(0, destinationIndex);\n              const itemsAfter = choices.slice(destinationIndex, sourceIndex);\n              const itemToMove = choices[sourceIndex];\n              const itemsEnd = choices.slice(sourceIndex + 1);\n              setQuestion({\n                ...question,\n                choices: [\n                  ...itemsBefore,\n                  itemToMove,\n                  ...itemsAfter,\n                  ...itemsEnd,\n                ],\n              });\n            }\n          }\n        }}\n      >\n        <Droppable droppableId=\"choices\">\n          {(provided, snapshot) => (\n            <div\n              {...provided.droppableProps}\n              ref={provided.innerRef}\n              className=\"question-choices\"\n            >\n              {question.type === \"dropdown\" ? (\n                <CustomDropDown\n                  choices={question.choices}\n                  makeValid={makeValid}\n                  removeChoice={removeChoice}\n                />\n              ) : (\n                <SingleMultipleChoice\n                  question={question}\n                  removeChoice={removeChoice}\n                  makeValid={makeValid}\n                />\n              )}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { init, FieldExtensionSDK } from \"contentful-ui-extensions-sdk\";\n\ninit((sdk: FieldExtensionSDK) => {\n  ReactDOM.render(<App sdk={sdk} />, document.getElementById(\"root\"));\n});\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}