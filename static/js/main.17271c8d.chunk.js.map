{"version":3,"sources":["../node_modules/contentful-ui-extensions-sdk/dist sync","components/QuestionTypeSwitcher/QuestionTypeSwitcher.tsx","components/AddChoice/AddChoice.tsx","components/InputEdit/InputEdit.tsx","components/utils/Spacer.tsx","components/QuestionChoice/QuestionChoice.tsx","components/SingleMultipleChoice/SingleMultipleChoice.tsx","components/CustomDropDown/CustomDropDown.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","questionTypes","QuestionTypeSwitcher","isOpen","setOpen","selectedQuestionType","setQuestionType","className","onClose","key","Date","now","toggleElement","size","buttonType","indicateDropdown","onClick","map","questionType","isActive","AddChoice","props","React","text","setText","value","placeholder","role","onChange","event","currentTarget","onKeyPress","onSubmit","InputEdit","editText","isEditMode","setEditMode","style","display","onBlur","onKeyDown","cursor","Spacer","width","QuestionChoice","choice","removeChoice","makeValid","dndProvided","editChoice","draggableProps","dragHandleProps","ref","innerRef","QuestionChoiceContent","margin","alignItems","data-testid","checked","isValid","labelText","dropdown","newText","iconProps","icon","label","SingleMultipleChoice","question","choices","index","draggableId","provided","snapshot","type","CustomDropDown","position","App","sdk","useState","setQuestion","useEffect","window","updateHeight","questionContentful","field","getValue","setValue","choiceId","filter","choiceToEditIndex","findIndex","slice","Math","random","toString","onDragEnd","result","destination","sourceIndex","source","destinationIndex","itemsBefore","itemsAfter","itemToMove","itemsEnd","droppableId","droppableProps","Boolean","location","hostname","match","init","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.17271c8d.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 30;","import * as React from \"react\";\r\nimport {\r\n  Dropdown,\r\n  Button,\r\n  DropdownListItem,\r\n  DropdownList,\r\n} from \"@contentful/forma-36-react-components\";\r\nimport { QuestionType } from \"../../App\";\r\n\r\nconst questionTypes: QuestionType[] = [\r\n  \"single-choice\",\r\n  \"multiple-choice\",\r\n  \"dropdown\",\r\n];\r\n\r\ntype Props = {\r\n  isOpen: boolean;\r\n  setOpen: (isOpen: boolean) => void;\r\n  selectedQuestionType: QuestionType;\r\n  setQuestionType: (questionType: QuestionType) => void;\r\n};\r\n\r\nexport function QuestionTypeSwitcher({\r\n  isOpen,\r\n  setOpen,\r\n  selectedQuestionType,\r\n  setQuestionType,\r\n}: Props) {\r\n  return (\r\n    <div className=\"question-type\">\r\n      <span>Choose question type:</span>\r\n      <Dropdown\r\n        isOpen={isOpen}\r\n        onClose={() => {\r\n          setOpen(false);\r\n        }}\r\n        key={Date.now()} // Force Reinit\r\n        toggleElement={\r\n          <Button\r\n            size=\"small\"\r\n            buttonType=\"muted\"\r\n            indicateDropdown\r\n            onClick={() => setOpen(!isOpen)}\r\n          >\r\n            {selectedQuestionType}\r\n          </Button>\r\n        }\r\n      >\r\n        <DropdownList>\r\n          {questionTypes.map((questionType) => (\r\n            <DropdownListItem\r\n              key={questionType}\r\n              isActive={questionType === selectedQuestionType}\r\n              onClick={() => {\r\n                setQuestionType(questionType);\r\n                setOpen(false);\r\n              }}\r\n            >\r\n              {questionType}\r\n            </DropdownListItem>\r\n          ))}\r\n        </DropdownList>\r\n      </Dropdown>\r\n    </div>\r\n  );\r\n}\r\n","import * as React from \"react\";\r\nimport { TextInput } from \"@contentful/forma-36-react-components\";\r\n\r\ninterface Props {\r\n  onSubmit: (text: string) => void;\r\n}\r\n\r\nexport function AddChoice(props: Props) {\r\n  const [text, setText] = React.useState(\"\");\r\n\r\n  return (\r\n    <div className=\"add-choice-container\">\r\n      <TextInput\r\n        value={text}\r\n        placeholder=\"add the choice's text and press return\"\r\n        role=\"add-choice-input\"\r\n        onChange={(event) => {\r\n          setText(event.currentTarget.value);\r\n        }}\r\n        onKeyPress={(event) => {\r\n          if (event.key === \"Enter\") {\r\n            props.onSubmit(text);\r\n            setText(\"\");\r\n          }\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import { TextInput } from \"@contentful/forma-36-react-components\";\r\nimport * as React from \"react\";\r\n\r\ninterface Props {\r\n  text: string;\r\n  editText: (newText: string) => void;\r\n}\r\n\r\nexport function InputEdit({ text, editText }: Props) {\r\n  const [isEditMode, setEditMode] = React.useState<boolean>(false);\r\n\r\n  return isEditMode ? (\r\n    <div style={{ display: \"inline-block\" }}>\r\n      <TextInput\r\n        value={text}\r\n        onChange={(e) => {\r\n          editText(e.currentTarget.value);\r\n        }}\r\n        onBlur={() => {\r\n          setEditMode(false);\r\n        }}\r\n        onKeyDown={(e) => {\r\n          if (e.key === \"Enter\") {\r\n            setEditMode(false);\r\n          }\r\n        }}\r\n      />\r\n    </div>\r\n  ) : (\r\n    <span\r\n      onClick={() => {\r\n        setEditMode(true);\r\n      }}\r\n      style={{ cursor: \"text\" }}\r\n    >\r\n      {text}\r\n    </span>\r\n  );\r\n}\r\n","import * as React from \"react\";\r\n\r\nexport function Spacer() {\r\n  return <span style={{ display: \"inline-block\", width: \"8px\" }}></span>;\r\n}\r\n","import * as React from \"react\";\r\nimport {\r\n  CardDragHandle,\r\n  Card,\r\n  IconButton,\r\n  RadioButton,\r\n  Checkbox,\r\n} from \"@contentful/forma-36-react-components\";\r\n\r\nimport { Choice, QuestionType } from \"../../App\";\r\nimport { DraggableProvided } from \"react-beautiful-dnd\";\r\nimport { InputEdit } from \"../InputEdit\";\r\nimport { Spacer } from \"../utils\";\r\n\r\ntype ContentProps = {\r\n  choice: Choice;\r\n  removeChoice: (choiceId: string) => void;\r\n  makeValid: (choiceId: string) => void;\r\n  questionType: QuestionType;\r\n  editChoice: (newText: string) => void;\r\n};\r\n\r\ntype Props = ContentProps & {\r\n  dndProvided: DraggableProvided;\r\n};\r\n\r\nexport function QuestionChoice({\r\n  choice,\r\n  removeChoice,\r\n  makeValid,\r\n  dndProvided,\r\n  questionType,\r\n  editChoice,\r\n}: Props) {\r\n  return (\r\n    <div\r\n      {...dndProvided.draggableProps}\r\n      {...dndProvided.dragHandleProps}\r\n      ref={dndProvided.innerRef}\r\n    >\r\n      <QuestionChoiceContent\r\n        choice={choice}\r\n        removeChoice={removeChoice}\r\n        makeValid={makeValid}\r\n        questionType={questionType}\r\n        editChoice={editChoice}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function QuestionChoiceContent({\r\n  choice,\r\n  removeChoice,\r\n  makeValid,\r\n  questionType,\r\n  editChoice,\r\n}: ContentProps) {\r\n  return (\r\n    <Card style={{ display: \"flex\" }}>\r\n      <div style={{ margin: \"-0.875rem 1rem -0.875rem -0.875rem\" }}>\r\n        <CardDragHandle>move</CardDragHandle>\r\n      </div>\r\n      <div style={{ alignItems: \"center\" }}>\r\n        {\r\n          {\r\n            \"single-choice\": (\r\n              <RadioButton\r\n                data-testid={`make-choice-valid-${choice.id}`}\r\n                checked={choice.isValid}\r\n                onChange={() => {\r\n                  makeValid(choice.id);\r\n                }}\r\n                id=\"choice-id\"\r\n                labelText={choice.text}\r\n              />\r\n            ),\r\n            \"multiple-choice\": (\r\n              <Checkbox\r\n                labelText={choice.text}\r\n                data-testid={`make-choice-valid-${choice.id}`}\r\n                checked={choice.isValid}\r\n                id=\"choice-id\"\r\n                onChange={() => {\r\n                  makeValid(choice.id);\r\n                }}\r\n              />\r\n            ),\r\n            dropdown: null,\r\n          }[questionType]\r\n        }\r\n        <Spacer />\r\n        <InputEdit\r\n          text={choice.text}\r\n          editText={(newText) => {\r\n            editChoice(newText);\r\n          }}\r\n        />\r\n        <Spacer />\r\n        <IconButton\r\n          onClick={() => removeChoice(choice.id)}\r\n          buttonType=\"negative\"\r\n          data-testid={`remove-choice-${choice.id}`}\r\n          iconProps={{\r\n            icon: \"Close\",\r\n          }}\r\n          label=\"remove\"\r\n        />\r\n      </div>\r\n    </Card>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\nimport { QuestionChoice } from \"../QuestionChoice\";\r\nimport { Question } from \"../../App\";\r\n\r\ninterface Props {\r\n  question: Question;\r\n  removeChoice: (choiceId: string) => void;\r\n  makeValid: (choiceId: string) => void;\r\n  editChoice: (choiceId: string, newText: string) => void;\r\n}\r\n\r\nexport function SingleMultipleChoice(props: Props) {\r\n  const { question, removeChoice, makeValid } = props;\r\n  return (\r\n    <>\r\n      {question.choices.map((choice, index) => (\r\n        <Draggable key={choice.id} draggableId={choice.id} index={index}>\r\n          {(provided, snapshot) => (\r\n            <QuestionChoice\r\n              questionType={question.type}\r\n              dndProvided={provided}\r\n              choice={choice}\r\n              removeChoice={removeChoice}\r\n              makeValid={makeValid}\r\n              editChoice={(newText: string) => {\r\n                props.editChoice(choice.id, newText);\r\n              }}\r\n            />\r\n          )}\r\n        </Draggable>\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport {\r\n  Dropdown,\r\n  Button,\r\n  DropdownListItem,\r\n  DropdownList,\r\n  IconButton,\r\n  RadioButton,\r\n} from \"@contentful/forma-36-react-components\";\r\nimport { Choice } from \"../../App\";\r\nimport { InputEdit } from \"../InputEdit\";\r\nimport { Spacer } from \"../utils\";\r\n\r\nimport \"./style.scss\";\r\n\r\ninterface Props {\r\n  choices: Choice[];\r\n  makeValid: (choiceId: string) => void;\r\n  removeChoice: (choiceId: string) => void;\r\n  editChoice: (choiceId: string, newText: string) => void;\r\n}\r\n\r\nexport function CustomDropDown(props: Props) {\r\n  const { choices, makeValid, removeChoice, editChoice } = props;\r\n  return (\r\n    <Dropdown\r\n      isOpen={true}\r\n      key={Date.now()} // Force Reinit\r\n      position=\"bottom-left\"\r\n      toggleElement={\r\n        <Button size=\"small\" buttonType=\"muted\" indicateDropdown>\r\n          Trigger Dropdown\r\n        </Button>\r\n      }\r\n    >\r\n      <DropdownList>\r\n        {choices &&\r\n          choices.map(({ id, text, isValid }) => (\r\n            <DropdownListItem key={id} className=\"dropdown-list-item-overrides\">\r\n              <RadioButton\r\n                labelText={text}\r\n                checked={isValid}\r\n                data-testid={`make-choice-${id}-valid`}\r\n                onChange={() => {\r\n                  makeValid(id);\r\n                }}\r\n                id=\"choice-id\"\r\n              />\r\n              <Spacer />\r\n              <InputEdit\r\n                text={text}\r\n                editText={(newText: string) => {\r\n                  editChoice(id, newText);\r\n                }}\r\n              />\r\n              <Spacer />\r\n              <IconButton\r\n                onClick={() => removeChoice(id)}\r\n                buttonType=\"negative\"\r\n                data-testid={`remove-choice-${id}`}\r\n                iconProps={{\r\n                  icon: \"Close\",\r\n                }}\r\n                label=\"remove\"\r\n              />\r\n            </DropdownListItem>\r\n          ))}\r\n      </DropdownList>\r\n    </Dropdown>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport \"@contentful/forma-36-react-components/dist/styles.css\";\r\n\r\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\r\nimport { QuestionTypeSwitcher } from \"./components/QuestionTypeSwitcher\";\r\nimport { AddChoice } from \"./components/AddChoice\";\r\nimport { SingleMultipleChoice } from \"./components/SingleMultipleChoice\";\r\nimport { CustomDropDown } from \"./components/CustomDropDown\";\r\nimport { FieldExtensionSDK } from \"contentful-ui-extensions-sdk\";\r\n\r\nexport type Choice = {\r\n  text: string;\r\n  id: string;\r\n  isValid: boolean;\r\n};\r\n\r\nexport type QuestionType = \"single-choice\" | \"multiple-choice\" | \"dropdown\";\r\n\r\nexport type Question = {\r\n  type: QuestionType;\r\n  choices: Choice[];\r\n};\r\n\r\ninterface Props {\r\n  sdk: FieldExtensionSDK;\r\n}\r\n\r\nfunction App({ sdk }: Props) {\r\n  const [isOpen, setOpen] = React.useState(false);\r\n  const [question, setQuestion] = React.useState<Question>({\r\n    type: \"multiple-choice\",\r\n    choices: [],\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    sdk.window.updateHeight(550);\r\n    const questionContentful = sdk.field.getValue();\r\n    if (questionContentful) setQuestion(questionContentful);\r\n  }, [sdk]);\r\n\r\n  React.useEffect(() => {\r\n    sdk.field.setValue(question);\r\n  }, [sdk, question]);\r\n\r\n  const makeValid = (choiceId: string) => {\r\n    setQuestion({\r\n      ...question,\r\n      choices: question.choices.map((choice) => {\r\n        if (choice.id === choiceId) {\r\n          return { ...choice, isValid: !choice.isValid };\r\n        }\r\n        if (question.type === \"single-choice\" || question.type === \"dropdown\")\r\n          return { ...choice, isValid: false };\r\n        return choice;\r\n      }),\r\n    });\r\n  };\r\n\r\n  const removeChoice = (choiceId: string) => {\r\n    setQuestion({\r\n      ...question,\r\n      choices: question.choices.filter((choice) => choice.id !== choiceId),\r\n    });\r\n  };\r\n\r\n  const editChoice = (choiceId: string, newText: string) => {\r\n    const choiceToEditIndex = question.choices.findIndex(\r\n      (choice) => choice.id === choiceId\r\n    );\r\n    if (choiceToEditIndex === -1) return;\r\n    setQuestion({\r\n      ...question,\r\n      choices: [\r\n        ...question.choices.slice(0, choiceToEditIndex),\r\n        {\r\n          ...question.choices[choiceToEditIndex],\r\n          text: newText,\r\n        },\r\n        ...question.choices.slice(choiceToEditIndex + 1),\r\n      ],\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"question-container\">\r\n      <QuestionTypeSwitcher\r\n        selectedQuestionType={question.type}\r\n        isOpen={isOpen}\r\n        setOpen={setOpen}\r\n        setQuestionType={(questionType) => {\r\n          setQuestion({\r\n            ...question,\r\n            type: questionType,\r\n            choices: question.choices.map((choice) => ({\r\n              ...choice,\r\n              isValid: false,\r\n            })),\r\n          });\r\n        }}\r\n      />\r\n      <AddChoice\r\n        onSubmit={(text) => {\r\n          setQuestion({\r\n            ...question,\r\n            choices: [\r\n              ...question.choices,\r\n              {\r\n                isValid: false,\r\n                id: `${Math.random().toString().slice(2)}`,\r\n                text,\r\n              },\r\n            ],\r\n          });\r\n        }}\r\n      />\r\n      <DragDropContext\r\n        onDragEnd={(result) => {\r\n          if (result.destination) {\r\n            const sourceIndex = result.source.index;\r\n            const destinationIndex = result.destination.index;\r\n            const choices = [...question.choices];\r\n            if (destinationIndex > sourceIndex) {\r\n              const itemsBefore = choices.slice(0, sourceIndex);\r\n              const itemsAfter = choices.slice(\r\n                sourceIndex + 1,\r\n                destinationIndex + 1\r\n              );\r\n              const itemToMove = choices[sourceIndex];\r\n              const itemsEnd = choices.slice(destinationIndex + 1);\r\n              setQuestion({\r\n                ...question,\r\n                choices: [\r\n                  ...itemsBefore,\r\n                  ...itemsAfter,\r\n                  itemToMove,\r\n                  ...itemsEnd,\r\n                ],\r\n              });\r\n            } else if (sourceIndex > destinationIndex) {\r\n              const itemsBefore = choices.slice(0, destinationIndex);\r\n              const itemsAfter = choices.slice(destinationIndex, sourceIndex);\r\n              const itemToMove = choices[sourceIndex];\r\n              const itemsEnd = choices.slice(sourceIndex + 1);\r\n              setQuestion({\r\n                ...question,\r\n                choices: [\r\n                  ...itemsBefore,\r\n                  itemToMove,\r\n                  ...itemsAfter,\r\n                  ...itemsEnd,\r\n                ],\r\n              });\r\n            }\r\n          }\r\n        }}\r\n      >\r\n        <Droppable droppableId=\"choices\">\r\n          {(provided, snapshot) => (\r\n            <div\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n              className=\"question-choices\"\r\n            >\r\n              {question.type === \"dropdown\" ? (\r\n                <CustomDropDown\r\n                  choices={question.choices}\r\n                  makeValid={makeValid}\r\n                  removeChoice={removeChoice}\r\n                  editChoice={editChoice}\r\n                />\r\n              ) : (\r\n                <SingleMultipleChoice\r\n                  question={question}\r\n                  removeChoice={removeChoice}\r\n                  makeValid={makeValid}\r\n                  editChoice={editChoice}\r\n                />\r\n              )}\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { init, FieldExtensionSDK } from \"contentful-ui-extensions-sdk\";\r\n\r\ninit((sdk: FieldExtensionSDK) => {\r\n  ReactDOM.render(<App sdk={sdk} />, document.getElementById(\"root\"));\r\n});\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}